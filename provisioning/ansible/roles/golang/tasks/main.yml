---
# file: roles/golang/tasks/main.yml

- name: Is Go currently installed?
  shell: "[ -d {{ golang_install_dir }}/go ] && echo 'Found' || echo ''"
  register: golang_installed
  tags: golang

- name: Create the Go install directory
  file: path={{ golang_install_dir }} owner=root group=root state=directory
  when: (not golang_installed.stdout)
  tags: golang

- name: Is current version of Go already installed? 
  shell: "{{ golang_install_dir }}/go/bin/go version | grep go{{ golang_minor_version}}"
  #shell: "{{ golang_install_dir }}/go/bin/go version | sed 's/[^0-9.]*\([0-9.]*\).*/\1/' | grep {{ golang_minor_version }}"
  when: golang_installed.stdout
  register: golang_version_installed
  changed_when: "golang_version_installed.rc == 1"
  ignore_errors: True

- name: Download Go binary archive file
  get_url: dest={{ golang_install_dir }}/{{ golang_download_filename }} url={{ golang_download_url }}
  when: (not golang_installed.stdout) or (not golang_version_installed.stdout) 
  tags: golang

- name: Extract Go binary archive file
  command: chdir={{ golang_install_dir }} tar zxvf {{ golang_install_dir }}/{{ golang_download_filename }} --owner=root
  when: (not golang_installed.stdout) or (not golang_version_installed.stdout) 
  tags: golang

- name: Copy config go.sh to /etc/profile.d/
  ###########################template: src=etc_profiled_go.sh.j2 dest=/etc/profile.d/go.sh owner=root group=root mode=0644
  template: src=etc_profiled_go.sh.j2 dest=/tmp/go.sh owner=root group=root mode=0644
  when: (not golang_installed.stdout) or (not golang_version_installed.stdout) 
  tags: golang

- name: Create GOPATH base directories
  file: path={{ item }} owner={{ golang_path_user }} group={{ golang_path_user }} state=directory
  with_items: golang_path
  when: ((not golang_installed.stdout) or (not golang_version_installed.stdout)) and golang_path is defined and golang_path_user is defined
  tags: golang

- name: Create GOPATH src sub-directory
  file: path={{ item }}/src owner={{ golang_path_user }} group={{ golang_path_user }} state=directory
  with_items: golang_path
  when: ((not golang_installed.stdout) or (not golang_version_installed.stdout)) and golang_path is defined and golang_path_user is defined
  tags: golang

- name: Create GOPATH bin sub-directory
  file: path={{ item }}/bin owner={{ golang_path_user }} group={{ golang_path_user }} state=directory
  with_items: golang_path
  when: ((not golang_installed.stdout) or (not golang_version_installed.stdout)) and golang_path is defined and golang_path_user is defined
  tags: golang

- name: Create GOPATH pkg sub-directory
  file: path={{ item }}/pkg owner={{ golang_path_user }} group={{ golang_path_user }} state=directory
  with_items: golang_path
  when: ((not golang_installed.stdout) or (not golang_version_installed.stdout)) and golang_path is defined and golang_path_user is defined
  tags: golang

- name: Cleanup Go binary archive file 
  file: path={{ golang_install_dir }}/{{ golang_download_filename }} state=absent
  when: (not golang_installed.stdout) or (not golang_version_installed.stdout) 
  tags: golang
